(()=>{"use strict";var t={n:e=>{var s=e&&e.__esModule?()=>e.default:()=>e;return t.d(s,{a:s}),s},d:(e,s)=>{for(var a in s)t.o(s,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:s[a]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};const e=require("express");var s=t.n(e);class a{constructor(t=0,e=0,s=0,a=0){this.boostMultiplierIncrease=t,this.resMultiplierIncrease=e,this.defReduction=a,this.shieldAbsorb=s}}class n{constructor(t=0,e=0,s=0,a=0){this.vulnerabilityMultiplierIncrease=t,this.defReduction=e,this.resMultiplierIncrease=s,this.toughnessMultiplierIncrease=a}}class i{constructor(){this.hp=0,this.hpPercentage=0,this.attack=0,this.attackPercentage=0,this.defense=0,this.defensePercentage=0,this.speed=0,this.speedPercentage=0,this.criticalChance=0,this.criticalDamage=0,this.stanceBreakRatio=0,this.healRatio=0,this.spRatio=0,this.statusProbability=0,this.statusResistance=0,this.physicalAddHurt=0,this.fireAddHurt=0,this.iceAddHurt=0,this.elecAddHurt=0,this.windAddHurt=0,this.quantumAddHurt=0,this.imaginaryAddHurt=0}}class r{constructor({target:t=0,effectiveField:e=["basic attack","skill","ultimate","follow up"],statsBoost:s=new i,effect:n=new a,notes:r=[]}={}){this.target=t,this.effectiveField=e,this.statsBoost=s,this.effect=n,this.notes=r}}class o{constructor({effect:t=new n,notes:e=[]}={}){this.effect=t,this.notes=e}}class c{constructor(t=80,e=.9,s=1){this.level=t,this.toughness=e,this.baseRes=s}}class l{constructor(t){this.character=t,this.buffs=[]}}class h{constructor(){this.unit=new c,this.debuffs=[]}}class u{constructor(t,e=new h){this.enemy=e,this.friendlyUnit=new l(t)}}function f(t){return[1,1.1,1.2,1.3,1.4,1.5,1.625,1.75,1.875,2,2.1,2.2].map((e=>e*t))}function d(t){const e={ATK:t.ATK??0,DEF:t.DEF??0,HP:t.HP??0};return{allLevelCoef:[.5,.6,.7,.8,.9,1,1.1].map((function(s){const a={CoefAggregate:[]};for(const n in t){const t=n;a.CoefAggregate.push({dependentStat:t,value:e[t]*s})}return a}))}}class p{constructor(t,e,s,a,n,i,r){this.dynamicProperties={};const o=function(t,e){const s=JSON.parse(JSON.stringify(t));for(const a of e)s.attackFinal+=a.statsBoost.attack,s.attackFinal+=a.statsBoost.attackPercentage*t.attackBase,s.defenseFinal+=a.statsBoost.defense,s.defenseFinal+=a.statsBoost.defensePercentage*t.defenseBase,s.hpFinal+=a.statsBoost.hp,s.hpFinal+=a.statsBoost.hpPercentage*t.hpBase,s.speedFinal+=a.statsBoost.speed,s.speedFinal+=a.statsBoost.speedPercentage,s.criticalChance+=a.statsBoost.criticalChance,s.criticalDamage+=a.statsBoost.criticalDamage,s.healRatio+=a.statsBoost.healRatio,s.stanceBreakRatio+=a.statsBoost.stanceBreakRatio,s.statusResistance+=a.statsBoost.statusResistance,s.statusProbability+=a.statsBoost.statusProbability,s.spRatio+=a.statsBoost.spRatio,s.elecAddHurt+=a.statsBoost.elecAddHurt,s.fireAddHurt+=a.statsBoost.fireAddHurt,s.iceAddHurt+=a.statsBoost.iceAddHurt,s.imaginaryAddHurt+=a.statsBoost.imaginaryAddHurt,s.windAddHurt+=a.statsBoost.windAddHurt,s.physicalAddHurt+=a.statsBoost.physicalAddHurt,s.quantumAddHurt+=a.statsBoost.quantumAddHurt;return t}(s,n),c={ATK:s.attackFinal,DEF:s.attackFinal,HP:s.attackFinal},l=i.debuffs,h=i.unit;this.stats=c,this.aggregateCoef=a,this.critDamage=o.criticalDamage,this.critRate=o.criticalChance,this.critMultiplier=1+Math.min(this.critRate,1)*this.critDamage,this.boostMultiplier=n.map((t=>t.effect.boostMultiplierIncrease)).reduce(((t,e)=>t+e),0)+1+function(t,e){switch(t){case"elec":return e.elecAddHurt;case"imaginary":return e.imaginaryAddHurt;case"wind":return e.windAddHurt;case"fire":case"ice":return e.fireAddHurt;case"quantum":return e.quantumAddHurt;case"physical":return e.physicalAddHurt}}(e,o),this.vulnerabilityMultiplier=l.map((t=>t.effect.vulnerabilityMultiplierIncrease)).reduce(((t,e)=>t+e),0)+1;const u=l.map((t=>t.effect.defReduction)).reduce(((t,e)=>t+e),0),f=n.map((t=>t.effect.defReduction)).reduce(((t,e)=>t+e),0);this.defMultiplier=(t+20)/((h.level+20)*(1-u-f)+t+20);const d=n.map((t=>t.effect.resMultiplierIncrease)).reduce(((t,e)=>t+e),0),p=l.map((t=>t.effect.resMultiplierIncrease)).reduce(((t,e)=>t+e),0);this.resMultiplier=d+p+1,this.toughnessMultiplier=.9+l.map((t=>t.effect.toughnessMultiplierIncrease)).reduce(((t,e)=>t+e),0),this.targetCount=r}getStraightDamageWithFinalStats(){let t=0;for(const e of this.aggregateCoef.CoefAggregate)"ATK"===e.dependentStat&&(t+=e.value**this.stats.ATK),"DEF"===e.dependentStat&&(t+=e.value*this.stats.DEF),"HP"===e.dependentStat&&(t+=e.value*this.stats.HP);return t*this.critMultiplier*this.boostMultiplier*this.defMultiplier*this.resMultiplier*this.vulnerabilityMultiplier*this.toughnessMultiplier*this.targetCount}getFlatMultipliers(){const t=[];for(const e of this.aggregateCoef.CoefAggregate){const s={coef:e.value,statValue:this.stats[e.dependentStat],type:e.dependentStat};t.push(s)}return{baseValueMultiplier:t,critMultiplier:this.critMultiplier,boostMultiplier:this.boostMultiplier,vulnerabilityMultiplier:this.vulnerabilityMultiplier,defMultiplier:this.defMultiplier,resMultiplier:this.resMultiplier,toughnessMultiplier:this.toughnessMultiplier,targetCount:this.targetCount,...this.dynamicProperties}}setProperty(t,e){this.dynamicProperties[t]=e}getProperty(t){return this.dynamicProperties[t]}}class g{constructor(t,e,s,a,n,i,r,o,c,l,h,u,f,d,p,g,m){this.name=t,this.eidolon=e,this.path=s,this.element=a,this.level=n,this.basic_level=i,this.skill_level=r,this.ultimate_level=o,this.talent_level=c,this.trace1=l,this.trace2=h,this.trace3=u,this.basic_data=f,this.skill_data=d,this.ultimate_data=p,this.talent_data=g,this.stats=m}addPassiveSkill(t){throw new Error("Method not implemented.")}addTraces(t){throw new Error("Method not implemented.")}addEidolons(t){throw new Error("Method not implemented.")}addEffect(t){this.addEidolons(t),this.addTraces(t),this.addPassiveSkill(t)}}class m{constructor(){this.maxRighteousHeart=6,this.RighteousHeartGainPerAttack=1,this.maxRighteousHeart=6,this.localBuffs={}}}class w{constructor(t=0){this.DracoreLibreCount=t}}class y extends g{constructor(t,e,s,a,n,i,r,o,c,l){super("Dan Heng IL",e,"destruction","imaginary",t,s,a,n,i,r,o,c,[d({ATK:1}),d({ATK:2.6}),d({ATK:3.8}),d({ATK:5})],f(.06),function(t){const e={ATK:t.ATK??0,DEF:t.DEF??0,HP:t.HP??0};return{allLevelCoef:[1.2,1.28,1.36,1.44,1.52,1.6,1.7,1.8,1.9,2,2.08,2.16].map((function(s){const a={CoefAggregate:[]};for(const n in t){const t=n;a.CoefAggregate.push({dependentStat:t,value:e[t]*s})}return a}))}}({ATK:1.5}),f(.05),l),this.localContext=new m,this.inTurnContext=new w}addEidolons(t){if(this.eidolon>=1&&(this.localContext.maxRighteousHeart+=4,this.localContext.RighteousHeartGainPerAttack+=1),this.eidolon>=6){const t=new r;t.effect.resMultiplierIncrease+=.2*3,t.notes.push("E6 Reign, Returned: After any other ally uses their Ultimate, the Imaginary RES PEN of Dan Heng â€¢ Imbibitor Lunae's next Fulgurant Leap attack increases by 20%, up to 3 stacks."),this.localContext.localBuffs.LeapResPen=t}}addTraces(t){if(this.trace3){const t=new r,e=.24;t.statsBoost.criticalDamage+=e,t.notes.push(`Jolt Anew: This character's CRIT DMG increases by ${round(100*e)}% when dealing DMG to enemy targets with Imaginary Weakness.`),this.localContext.localBuffs.imagWeakCritDamageIncrease=t}}addPassiveSkill(t){const e=new r,s=this.talent_data[this.talent_level-1]*this.localContext.maxRighteousHeart/2;e.effect.boostMultiplierIncrease+=s,e.notes.push(`Righteous Heart: Damage increase by ${round(100*s)} (Approximated)%`),this.localContext.localBuffs.RighteousHeart=e;const a=this.skill_data[this.skill_level-1],n=new r({effectiveField:["basic attack"]}),i=2.2*a;n.statsBoost.criticalDamage+=2.2*a,n.notes.push(`Dracore Libre: CRIT DMG increase by ${round(100*i)}%`),this.localContext.localBuffs.DracoreLibre=n}getDisplayData1(t,e){const s=[...t.friendlyUnit.buffs].filter((t=>t.effectiveField.includes("basic attack"))),a=this.localContext.localBuffs;return a.imagWeakCritDamageIncrease&&s.concat(a.imagWeakCritDamageIncrease),a.DracoreLibre&&s.concat(a.DracoreLibre),a.RighteousHeart&&s.concat(a.RighteousHeart),new p(this.level,this.element,this.stats,this.basic_data[2].allLevelCoef[this.basic_level-1],s,t.enemy,1.32).getFlatMultipliers()}getDisplayData2(t,e){}getDisplayData3(t,e){throw new Error("Method not implemented.")}}class b{constructor(t){this.count=t,this.setName="Band of Sizzling Thunder"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r;e.statsBoost.attackPercentage+=.2,e.notes.push(`${this.setName}: When the wearer uses Skill, increases the wearer's ATK by 20% for 1 turn(s).`),t.push(e)}return t}}class B{constructor(t){this.count=t,this.setName="Belobog of the Architects"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r;e.statsBoost.defensePercentage+=.15,e.notes.push(`${this.setName}: When the wearer's Effect Hit Rate is 50% or higher, the wearer gains an extra 15% DEF (effective).`),t.push(e)}return t}}class v{constructor(t){this.count=t,this.setName="Broken Keel"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r({target:[0,1,2,3]});e.statsBoost.criticalDamage+=.1,e.notes.push(`${this.setName}: When the wearer's Effect RES is at 30% or higher, all allies' CRIT DMG increases by 10% (effective).`),t.push(e)}return t}}class k{constructor(t){this.count=t,this.setName="Celestial Differentiator"}getInBattleEffect(){return new r,[]}}class D{constructor(t){this.count=t,this.setName="Champion of Streetwise Boxing"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r;e.statsBoost.attackPercentage+=2.5,e.notes.push(`${this.setName}: After the wearer attacks or is hit,\n                their ATK increases by 5% for the rest of the battle. This effect can stack up to 5 time(s).`),t.push(e)}return t}}class I{constructor(t){this.count=t,this.setName="Eagle of Twilight Line"}getInBattleEffect(){return new r,[]}}class M{constructor(t){this.count=t,this.setName="Firesmith of Lava-Forging"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r({effectiveField:["skill"]});e.effect.boostMultiplierIncrease+=.12,e.notes.push(`${this.setName}: Increases the wearer's Skill DMG by 12% (effective)`);const s=new r;s.statsBoost.fireAddHurt+=.12,s.notes.push(`${this.setName}: After unleashing Ultimate, increases the wearer's Fire DMG by 12% for next attack (effective).`),t.push(e),t.push(s)}return t}}class E{constructor(t){this.count=t,this.setName="Fleet of the Ageless"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r({target:[0,1,2,3]});e.statsBoost.attackPercentage+=.08,e.notes.push(`${this.setName}: When the wearer's SPD reaches 120 or higher, all allies' ATK increases by 8% (effective).`),t.push(e)}return t}}class A{constructor(t){this.count=t,this.setName="Genius of Brilliant Stars"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r;e.effect.defReduction+=.2,e.notes.push(`${this.setName}: When the wearer deals DMG to the target enemy, ignores 10% DEF.\n                If the target enemy has Quantum Weakness, the wearer additionally ignores 10% DEF.\n                (currently 20% DEF Reduction Applied)`),t.push(e)}return t}}class N{constructor(t){this.count=t,this.setName="Guard of Wuthering Snow"}getInBattleEffect(){return new r,[]}}class R{constructor(t){this.count=t,this.setName="Hunter of Glacial Forest"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r;e.statsBoost.criticalDamage+=.25,e.notes.push(`${this.setName}: After the wearer unleashes their Ultimate, their CRIT DMG increases by 25% for 2 turn(s).`),t.push(e)}return t}}class T{constructor(t){this.count=t,this.setName="Inert Salsotto"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r({effectiveField:["ultimate","follow up"]});e.effect.boostMultiplierIncrease+=.15,e.notes.push(`${this.setName}: When the wearer's current CRIT Rate reaches 50% or higher,\n                the wearer's Ultimate and follow-up attack DMG increases by 15%.`),t.push(e)}return t}}class P{constructor(t){this.count=t,this.setName="Izumo Gensei and Takama Divine Realm"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r;e.statsBoost.criticalChance+=.12,e.notes.push(`${this.setName}: When entering battle\n                if at least one other ally follows the same Path as the wearer,\n                then the wearer's CRIT Rate increases by 12%.`),t.push(e)}return t}}class C{constructor(t){this.count=t,this.setName="Knight of Purity Palace"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r;e.effect.shieldAbsorb+=.2,e.notes.push(`${this.setName}:\n                Increases the max DMG that can be absorbed by the shield created by the wearer by 20%.`),t.push(e)}return t}}class H{constructor(t){this.count=t,this.setName="Longevous Disciple"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r;e.statsBoost.criticalChance+=.16,e.notes.push(`${this.setName}:\n                When the wearer is hit or has their HP consumed by an ally or themselves,\n                their CRIT Rate increases by 8% for 2 turn(s) and up to 2 stacks.`),t.push(e)}return t}}class F{constructor(t){this.count=t,this.setName="Messenger Traversing Hackerspace"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r({target:[0,1,2,3]});e.statsBoost.speedPercentage+=.12,e.notes.push(`${this.setName}: When the wearer uses their Ultimate on an ally,\n                SPD for all allies increases by 12% for 1 turn(s).\n                This effect cannot be stacked.`),t.push(e)}return t}}class S{constructor(t){this.count=t,this.setName="Musketeer of Wild Wheat"}getInBattleEffect(){return new r,[]}}class ${constructor(t){this.count=t,this.setName="Pan Cosmic Commercial Enterprise"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r;e.statsBoost.attackPercentage+=.25,e.notes.push(`${this.setName}:\n                The wearer's ATK increases by an amount that is equal to 25% of the current Effect Hit Rate,\n                up to a maximum of 25% (25% applied).`),t.push(e)}return t}}class W{constructor(t){this.count=t,this.setName="Passerby of Wandering Cloud"}getInBattleEffect(){return new r,[]}}class x{constructor(t){this.count=t,this.setName="Penacony Land of the Dreams"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r({target:[0,1,2,3]});e.effect.boostMultiplierIncrease+=.1,e.notes.push(`${this.setName}:\n                Increases DMG for all other allies with the same DMG Type as the wearer by 10%.`),t.push(e)}return t}}class G{constructor(t){this.count=t,this.setName="Pioneer Diver of Dead Waters"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r;e.effect.boostMultiplierIncrease+=.12,e.notes.push(`${this.setName}: Increases DMG dealt to enemies with debuffs by 12% (effective).`),t.push(e)}if(this.count>=4){const e=new r;e.statsBoost.criticalDamage+=.24,e.notes.push(`${this.setName}:\n            The wearer deals 8%/12% increased CRIT DMG to enemies with at least 2/3 debuffs.\n            After the wearer inflicts a debuff on enemy targets,\n            the aforementioned effects increase by 100%, lasting for 1 turn.\n            (currently 24% damage boost applied)`),t.push(e)}return t}}class L{constructor(t){this.count=t,this.setName="Prisoner in Deep Confinement"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r;e.effect.defReduction+=.18,e.notes.push(`${this.setName}: For every DoT the target enemy is afflicted with,\n                the wearer will ignore 6% of target's DEF when dealing DMG to them.\n                This effect is valid for a max of 3 DoTs (currently 18% DEF reduction applied).`),t.push(e)}return t}}class K{constructor(t){this.count=t,this.setName="Rutilant Arena"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r({effectiveField:["basic attack","skill"]});e.effect.boostMultiplierIncrease+=.2,e.notes.push(`${this.setName}: When the wearer's current CRIT Rate reaches 70% or higher,\n                the wearer's Basic ATK and Skill DMG increase by 20% (effective)`),t.push(e)}return t}}class _{constructor(t){this.count=t,this.setName="Sigonia the Unclaimed Desolation"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r;e.statsBoost.criticalDamage+=.4,e.notes.push(`${this.setName}: When an enemy target gets defeated,\n                the wearer's CRIT DMG increases by 4%, stacking up to 10 time(s)\n                (currently 10 stacks applied).`),t.push(e)}return t}}class U{constructor(t){this.count=t,this.setName="Space Sealing Station"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r;e.statsBoost.attackPercentage+=.12,e.notes.push(`${this.setName}: When the wearer's SPD reaches 120 or higher,\n                the wearer's ATK increases by an extra 12% (effective).`),t.push(e)}return t}}class q{constructor(t){this.count=t,this.setName="Sprightly Vonwacq"}getInBattleEffect(){return new r,[]}}class O{constructor(t){this.count=t,this.setName="Talia: Kingdom of Banditry"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r;e.statsBoost.stanceBreakRatio+=.2,e.notes.push(`${this.setName}: When the wearer's SPD reaches 145 or higher, the wearer's Break effect increases by an extra 20% (effective).`),t.push(e)}return t}}class z{constructor(t){this.count=t,this.setName="The Ashblazing Grand Duke"}getInBattleEffect(){const t=[];if(this.count>=2){const e=new r({effectiveField:["follow up"]});e.effect.boostMultiplierIncrease+=.2,e.notes.push(`${this.setName}: Increases follow-up attack DMG by 20%.`),t.push(e)}if(this.count>=4){const e=new r;e.statsBoost.attackPercentage+=.48,e.notes.push(`${this.setName}: When the wearer uses follow-up attacks against the target enemy,\n            increase the wearer's ATK by 6% for every time the follow-up attack deals DMG.\n            This effect can stack for a maximum of 8 times and lasts for 3 turns (currently 8 stacks counted)).`),t.push(e)}return t}}class J{constructor(t){this.count=t,this.setName="Thief of Shooting Meteor"}getInBattleEffect(){return new r,[]}}class V{constructor(t){this.count=t,this.setName="Wastelander of Banditry Desert"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r;e.statsBoost.criticalChance+=.1,e.statsBoost.criticalDamage+=.2,e.notes.push(`${this.setName}: \n                When attacking debuffed enemies, \n                the wearer's CRIT Rate increases by 10%, \n                and their CRIT DMG increases by 20% against Imprisoned enemies.`),t.push(e)}return t}}class j{constructor(t){this.count=t,this.setName="Watchmaker Master of Dream Machinations"}getInBattleEffect(){const t=[];if(this.count>=4){const e=new r({target:[0,1,2,3]});e.statsBoost.stanceBreakRatio+=.3,e.notes.push(`${this.setName}: \n                When the wearer uses their Ultimate on an ally, \n                Break Effect for all allies increases by 30% for 2 turn(s). \n                This effect cannot be stacked.`),t.push(e)}return t}}function Q(t,e){return 101===t?new W(e):102===t?new S(e):103===t?new C(e):104===t?new R(e):105===t?new D(e):106===t?new N(e):107===t?new M(e):108===t?new A(e):109===t?new b(e):110===t?new I(e):111===t?new J(e):112===t?new V(e):113===t?new H(e):114===t?new F(e):115===t?new z(e):116===t?new L(e):117===t?new G(e):118===t?new j(e):301===t?new U(e):302===t?new E(e):303===t?new $(e):304===t?new B(e):305==t?new k(e):306===t?new T(e):307===t?new O(e):308===t?new q(e):309===t?new K(e):310===t?new v(e):311===t?new M(e):312===t?new x(e):313===t?new _(e):314===t?new P(e):void 0}class X{constructor(t,e,s,a,n,i,r){this.holderPath=t,this.name=e,this.path=s,this.level=n,this.promotion=i,this.rankLevel=r,this.effectName=a}isEffective(){return this.holderPath===this.path}}class Y extends X{constructor(t,e,s,a){super(t,"Brighter Than the Sun","destruction","Defiant Till Death",e,s,a)}getInBattleEffect(){if(this.isEffective()){const t=new r,e=.15+.03*this.rankLevel,s=.05+.01*this.rankLevel;return t.statsBoost.attackPercentage+=2*e,t.statsBoost.spRatio+=2*s,t.notes.push(`${this.effectName}: Increases the wearer's Attack by ${round(100*e)}% \n            and Energy Regen Rate by ${round(100*s)}% for every stack of Dragon's Call\n            (currently 2 stacks applied).`),t}return[]}}class Z extends X{constructor(t,e,s,a){super(t,"Along the Passing Shore","nihility","Steerer",e,s,a)}getInBattleEffect(){if(this.isEffective()){const t=new r,e=.2+.04*this.rankLevel;t.effect.boostMultiplierIncrease+=e,t.notes.push(`${this.effectName}: The wearer deals ${round(100*e)}% \n                increased DMG to targets afflicted with Mirage Fizzle`);const s=new r({effectiveField:["ultimate"]}),a=.2+.04*this.rankLevel;return s.effect.boostMultiplierIncrease+=a,s.notes.push(`${this.effectName}: The DMG dealt by the wearer's Ultimate additionally \n            increases by ${round(100*e)}%.`),[t,s]}return[]}}class tt extends X{constructor(t,e,s,a){super(t,"I Shall Be My Own Sword","destruction","With This Evening Jade",e,s,a)}getInBattleEffect(){if(this.isEffective()){const t=new r,e=.115+.025*this.rankLevel,s=.1+.02*this.rankLevel;return t.effect.boostMultiplierIncrease+=3*e,t.effect.defReduction+=s,t.notes.push(`${this.effectName}: Each stack of Eclipse increases the DMG of the wearer's next attack \n                by ${round(100*e)}%. When 3 stack(s) are reached, additionally enables the attack\n                to ignore ${round(100*s)}% of the enemy's DEF.`),t}return[]}}const et=s()();et.use(s().json()),et.get("/",((t,e)=>{e.send("Hello World from TypeScript!")})),et.post("/singlecharacter",((t,e)=>{const s=function(t){const e=function(t,e){if(1213===t.id)return new y(t.level,t.rank,t.basic_level,t.skill_level,t.ultimate_level,t.talent_level,t.trace1,t.trace2,t.trace3,e)}(t,t.combatValues);if(!e)return;const s=new u(e),a=function(t,e){if(void 0!==t)return 23015===t.id?new Y(e,t.level,t.promotion,t.rankLevel):23024===t.id?new Z(e,t.level,t.promotion,t.rankLevel):23014===t.id?new tt(e,t.level,t.promotion,t.rankLevel):void 0}(t.weapon,e.path),n=function(t){const e=new Map;for(let s of t){const t=e.get(s.setID)||0;e.set(s.setID,t+1)}const s=[];for(const[t,a]of e){const e=Q(t,a);void 0!==e&&(console.log(e),s.push(e))}return s}(t.relics);if(!a)return;if(!n)return;const i=a.getInBattleEffect();if(i instanceof r)s.friendlyUnit.buffs.push(i);else if(i instanceof o)s.enemy.debuffs.push(i);else for(const t of i)t instanceof r?s.friendlyUnit.buffs.push(t):s.enemy.debuffs.push(t)}(t.body);e.send(JSON.stringify(s))}));const st=process.env.PORT||4e3;et.listen(st,(()=>{console.log(`Server is running on port ${st}`)}))})();